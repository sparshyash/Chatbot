{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOQPCTKMOBvHtobVgQmodUR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n1qzyNuIUdfS","executionInfo":{"status":"ok","timestamp":1753963051359,"user_tz":-330,"elapsed":166628,"user":{"displayName":"Sparsh Garg","userId":"01264362496705112159"}},"outputId":"1b686fc1-d814-4116-848f-92aa1efb433a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting slack_sdk\n","  Downloading slack_sdk-3.36.0-py2.py3-none-any.whl.metadata (15 kB)\n","Collecting langdetect\n","  Downloading langdetect-1.0.9.tar.gz (981 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m981.5/981.5 kB\u001b[0m \u001b[31m11.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.11/dist-packages (2.177.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from langdetect) (1.17.0)\n","Requirement already satisfied: httplib2<1.0.0,>=0.19.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (0.22.0)\n","Requirement already satisfied: google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (2.38.0)\n","Requirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (0.2.0)\n","Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (2.25.1)\n","Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (4.2.0)\n","Requirement already satisfied: googleapis-common-protos<2.0.0,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (1.70.0)\n","Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<7.0.0,>=3.19.5 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (5.29.5)\n","Requirement already satisfied: proto-plus<2.0.0,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (1.26.1)\n","Requirement already satisfied: requests<3.0.0,>=2.18.0 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (2.32.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (5.5.2)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (0.4.2)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (4.9.1)\n","Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2<1.0.0,>=0.19.0->google-api-python-client) (3.2.3)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client) (0.6.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (2.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5->google-api-python-client) (2025.7.14)\n","Downloading slack_sdk-3.36.0-py2.py3-none-any.whl (293 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m293.9/293.9 kB\u001b[0m \u001b[31m27.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: langdetect\n","  Building wheel for langdetect (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for langdetect: filename=langdetect-1.0.9-py3-none-any.whl size=993223 sha256=2fc17b7bb6f41aa7b7863d1a82ebdc35753af1fd5ff34fd1d768ebf365dcc51f\n","  Stored in directory: /root/.cache/pip/wheels/0a/f2/b2/e5ca405801e05eb7c8ed5b3b4bcf1fcabcd6272c167640072e\n","Successfully built langdetect\n","Installing collected packages: slack_sdk, langdetect\n","Successfully installed langdetect-1.0.9 slack_sdk-3.36.0\n","\n","==================================================\n","  SPARSH SOFTWARE SOLUTIONS - AI ASSISTANT\n","==================================================\n","\n","Bot: Welcome! I'm your Sparsh Solutions assistant. Type 'menu' for options or 'quit' to exit.\n","\n","\n","Client: menu\n","\n","Bot: (Detected non-English input. English preferred for accurate responses)\n","\n","Bot: Main Options:\n","- Company info\n","- Services\n","- Pricing\n","- Projects\n","- Contact\n","- Schedule meeting\n","- Payment questions\n","- Project status\n","- New client onboarding\n","- Technical support\n","- Careers\n","- Quit\n","\n","Client: Services\n","\n","Bot: I didn't understand that. Here are some options:\n","- Type 'payment' for billing questions\n","- Type 'project status' for updates\n","- Type 'onboarding' for new clients\n","- Type 'menu' for full options\n","\n","Client: payment\n","\n","Bot: (Detected non-English input. English preferred for accurate responses)\n","\n","Bot: For payment-related inquiries:\n","1. Invoice status\n","2. Make payment\n","3. Payment methods\n","4. Billing questions\n","\n","Bot: Please select an option (1-4): 2\n","\n","Bot: Our payment portal: pay.sparshsolutions.com\n","Accepted methods: Credit Cards, Bank Transfer, PayPal\n","\n","Client: Paypal\n","\n","Bot: (Detected non-English input. English preferred for accurate responses)\n","\n","Bot: For payment-related inquiries:\n","1. Invoice status\n","2. Make payment\n","3. Payment methods\n","4. Billing questions\n","\n","Bot: Please select an option (1-4): menu\n","\n","Bot: Please email billing@sparshsolutions.com for detailed billing questions\n","\n","Client: 4\n","\n","Bot: I didn't understand that. Here are some options:\n","- Type 'payment' for billing questions\n","- Type 'project status' for updates\n","- Type 'onboarding' for new clients\n","- Type 'menu' for full options\n","\n","Client: menu\n","\n","Bot: (Detected non-English input. English preferred for accurate responses)\n","\n","Bot: Main Options:\n","- Company info\n","- Services\n","- Pricing\n","- Projects\n","- Contact\n","- Schedule meeting\n","- Payment questions\n","- Project status\n","- New client onboarding\n","- Technical support\n","- Careers\n","- Quit\n","\n","Client: Quit\n","\n","Bot: (Detected non-English input. English preferred for accurate responses)\n","\n","Bot: Thank you for choosing Sparsh Solutions. Have a productive day!\n"]}],"source":["!pip install slack_sdk langdetect google-api-python-client\n","\n","import re\n","import random\n","from datetime import datetime\n","import csv\n","from slack_sdk import WebClient\n","from googleapiclient.discovery import build\n","from langdetect import detect\n","\n","class SparshEnhancedChatbot:\n","    def __init__(self):\n","        # Initialize integrations\n","        self.crm_contacts = []\n","        self.load_crm_data()\n","        self.slack_client = WebClient(token='xoxb-your-slack-token')\n","        self.calendar_service = build('calendar', 'v3')\n","\n","        print(\"\\n\" + \"=\"*50)\n","        print(\"  SPARSH SOFTWARE SOLUTIONS - AI ASSISTANT\")\n","        print(\"=\"*50)\n","        print(\"\\nBot: Welcome! I'm your Sparsh Solutions assistant. Type 'menu' for options or 'quit' to exit.\\n\")\n","\n","    def load_crm_data(self):\n","        \"\"\"Load existing CRM contacts\"\"\"\n","        try:\n","            with open('crm_contacts.csv', mode='r') as file:\n","                reader = csv.DictReader(file)\n","                self.crm_contacts = list(reader)\n","        except FileNotFoundError:\n","            self.crm_contacts = []\n","\n","    def save_to_crm(self, contact_info):\n","        \"\"\"Save new contact to CRM\"\"\"\n","        self.crm_contacts.append(contact_info)\n","        with open('crm_contacts.csv', mode='a', newline='') as file:\n","            writer = csv.DictWriter(file, fieldnames=contact_info.keys())\n","            if file.tell() == 0:\n","                writer.writeheader()\n","            writer.writerow(contact_info)\n","\n","    def handle_meeting_schedule(self):\n","        \"\"\"Google Calendar integration\"\"\"\n","        print(\"\\nBot: Let's schedule a meeting. First, I need some details:\")\n","        email = input(\"Bot: Your email address: \").strip()\n","        purpose = input(\"Bot: Meeting purpose (consultation/demo/support): \").strip()\n","\n","        # Google Calendar API call would go here\n","        print(f\"\\nBot: Scheduling {purpose} meeting with {email}...\")\n","        print(\"Bot: Please check your email for calendar invites from Sparsh Solutions.\")\n","\n","        # Add to CRM\n","        self.save_to_crm({\n","            'email': email,\n","            'purpose': purpose,\n","            'date': datetime.now().strftime(\"%Y-%m-%d\"),\n","            'status': 'pending'\n","        })\n","\n","    def handle_payment_inquiry(self):\n","        \"\"\"Payment processing integration\"\"\"\n","        print(\"\\nBot: For payment-related inquiries:\")\n","        print(\"1. Invoice status\")\n","        print(\"2. Make payment\")\n","        print(\"3. Payment methods\")\n","        print(\"4. Billing questions\")\n","\n","        choice = input(\"\\nBot: Please select an option (1-4): \")\n","\n","        if choice == '1':\n","            invoice = input(\"Bot: Please provide invoice number: \")\n","            print(f\"\\nBot: Checking status for invoice {invoice}...\")\n","            print(\"Bot: This invoice is paid/unpaid (mock response)\")\n","        elif choice == '2':\n","            print(\"\\nBot: Our payment portal: pay.sparshsolutions.com\")\n","            print(\"Accepted methods: Credit Cards, Bank Transfer, PayPal\")\n","        elif choice == '3':\n","            print(\"\\nBot: We accept:\")\n","            print(\"- Visa/Mastercard/Amex\")\n","            print(\"- International wire transfers\")\n","            print(\"- PayPal\")\n","            print(\"- Cryptocurrency (BTC/ETH) for select clients\")\n","        else:\n","            print(\"\\nBot: Please email billing@sparshsolutions.com for detailed billing questions\")\n","\n","    def handle_project_status(self):\n","        \"\"\"Project management integration\"\"\"\n","        print(\"\\nBot: Please authenticate to access project details\")\n","        project_id = input(\"Project ID: \").strip()\n","        email = input(\"Registered email: \").strip()\n","\n","        # Mock verification\n","        if \"@\" in email and len(project_id) == 8:\n","            print(f\"\\nBot: Accessing project {project_id}...\")\n","            print(\"Current Status: Development Phase\")\n","            print(\"Next Milestone: QA Testing (due 2023-12-15)\")\n","            print(\"Project Manager: Alex Johnson (alex.j@sparshsolutions.com)\")\n","\n","            # Post to Slack channel\n","            self.slack_client.chat_postMessage(\n","                channel='#project-alerts',\n","                text=f\"User {email} accessed project {project_id} via chatbot\"\n","            )\n","        else:\n","            print(\"\\nBot: Authentication failed. Please contact your project manager\")\n","\n","    def handle_onboarding(self):\n","        \"\"\"Client onboarding workflow\"\"\"\n","        print(\"\\n\" + \"=\"*50)\n","        print(\"  NEW CLIENT ONBOARDING PROCESS\")\n","        print(\"=\"*50)\n","\n","        print(\"\\nBot: Let's get you started with Sparsh Solutions!\")\n","        company = input(\"Your company name: \").strip()\n","        contact = input(\"Primary contact name: \").strip()\n","        email = input(\"Business email: \").strip()\n","        service = input(\"Service needed (development/consulting/other): \").strip()\n","\n","        # Save to CRM\n","        self.save_to_crm({\n","            'company': company,\n","            'contact': contact,\n","            'email': email,\n","            'service': service,\n","            'date': datetime.now().strftime(\"%Y-%m-%d\"),\n","            'status': 'new_lead'\n","        })\n","\n","        print(\"\\nBot: Thank you! Next steps:\")\n","        print(\"1. We'll email our service agreement within 24hrs\")\n","        print(\"2. Your account manager will contact you\")\n","        print(\"3. Kickoff meeting scheduling\")\n","\n","        # Notify team via Slack\n","        self.slack_client.chat_postMessage(\n","            channel='#new-leads',\n","            text=f\"New client onboarding: {company} ({contact}) for {service}\"\n","        )\n","\n","    def detect_language(self, text):\n","        \"\"\"Multilingual support\"\"\"\n","        try:\n","            return detect(text)\n","        except:\n","            return 'en'\n","\n","    def start_chat(self):\n","        \"\"\"Main chat loop\"\"\"\n","        while True:\n","            user_input = input(\"\\nClient: \").lower()\n","\n","            # Language detection\n","            lang = self.detect_language(user_input)\n","            if lang != 'en':\n","                print(\"\\nBot: (Detected non-English input. English preferred for accurate responses)\")\n","\n","            if user_input == 'quit':\n","                print(\"\\nBot: Thank you for choosing Sparsh Solutions. Have a productive day!\")\n","                break\n","\n","            elif user_input == 'menu':\n","                print(\"\\nBot: Main Options:\")\n","                print(\"- Company info\")\n","                print(\"- Services\")\n","                print(\"- Pricing\")\n","                print(\"- Projects\")\n","                print(\"- Contact\")\n","                print(\"- Schedule meeting\")\n","                print(\"- Payment questions\")\n","                print(\"- Project status\")\n","                print(\"- New client onboarding\")\n","                print(\"- Technical support\")\n","                print(\"- Careers\")\n","                print(\"- Quit\")\n","\n","            # [Previous response handlers remain unchanged...]\n","\n","            # New enhanced features\n","            elif re.search(r'payment|invoice|billing|pay', user_input):\n","                self.handle_payment_inquiry()\n","\n","            elif re.search(r'project status|my project|update', user_input):\n","                self.handle_project_status()\n","\n","            elif re.search(r'onboard|new client|start project', user_input):\n","                self.handle_onboarding()\n","\n","            elif re.search(r'schedule|meeting|call|consultation', user_input):\n","                self.handle_meeting_schedule()\n","\n","            # [Other existing elif blocks...]\n","\n","            else:\n","                print(\"\\nBot: I didn't understand that. Here are some options:\")\n","                print(\"- Type 'payment' for billing questions\")\n","                print(\"- Type 'project status' for updates\")\n","                print(\"- Type 'onboarding' for new clients\")\n","                print(\"- Type 'menu' for full options\")\n","\n","# Run the chatbot\n","if __name__ == \"__main__\":\n","    bot = SparshEnhancedChatbot()\n","    bot.start_chat()"]},{"cell_type":"code","metadata":{"id":"0d7e0340"},"source":["!pip install slack_sdk langdetect google-api-python-client"],"execution_count":null,"outputs":[]}]}